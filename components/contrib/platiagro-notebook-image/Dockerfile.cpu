ARG BASE_CONTAINER=ubuntu:18.04
FROM $BASE_CONTAINER

LABEL maintainer="fabiol@cpqd.com.br"

ARG NB_USER="jovyan"
ARG NB_UID="1000"
ARG NB_GID="100"

USER root

# Install all OS dependencies for notebook server that starts but lacks all
# features (e.g., download as all possible file formats)
ENV DEBIAN_FRONTEND noninteractive
RUN apt-get update \
 && apt-get install -yq --no-install-recommends \
    wget \
    bzip2 \
    ca-certificates \
    sudo \
    locales \
    fonts-liberation \
    run-one \
    lsb-core \
    build-essential \
    gnupg2 \
    git \
    unzip \
    curl \
    swig \
    openjdk-11-jdk \
    libgl1-mesa-glx \
    libglib2.0-0 \
    tesseract-ocr \
    tesseract-ocr-por \
    tesseract-ocr-eng \
    zip \
 && export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)" \
 && echo "deb https://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" > /etc/apt/sources.list.d/google-cloud-sdk.list \
 && curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - \
 && apt-get update \
 && apt-get install -y google-cloud-sdk kubectl \
 && apt-get clean && rm -rf /var/lib/apt/lists/*

RUN echo "en_US.UTF-8 UTF-8" > /etc/locale.gen \
 && locale-gen

# Configure environment
ENV CONDA_DIR=/opt/conda \
    SHELL=/bin/bash \
    NB_USER=$NB_USER \
    NB_UID=$NB_UID \
    NB_GID=$NB_GID \
    LC_ALL=en_US.UTF-8 \
    LANG=en_US.UTF-8 \
    LANGUAGE=en_US.UTF-8
ENV PATH=$CONDA_DIR/bin:$PATH \
    HOME=/home/$NB_USER

# Copy a script that we will use to correct permissions after running certain commands
COPY fix-permissions /usr/local/bin/fix-permissions
RUN chmod a+rx /usr/local/bin/fix-permissions

# Enable prompt color in the skeleton .bashrc before creating the default NB_USER
RUN sed -i 's/^#force_color_prompt=yes/force_color_prompt=yes/' /etc/skel/.bashrc

# Create NB_USER wtih name jovyan user with UID=1000 and in the 'users' group
# and make sure these dirs are writable by the `users` group.
RUN echo "auth requisite pam_deny.so" >> /etc/pam.d/su \
 && sed -i.bak -e 's/^%admin/#%admin/' /etc/sudoers \
 && sed -i.bak -e 's/^%sudo/#%sudo/' /etc/sudoers \
 && useradd -m -s /bin/bash -N -u $NB_UID $NB_USER \
 && mkdir -p $CONDA_DIR \
 && chown $NB_USER:$NB_GID $CONDA_DIR \
 && chmod g+w /etc/passwd \
 && fix-permissions $HOME \
 && fix-permissions $CONDA_DIR

USER $NB_UID
WORKDIR $HOME
ARG PYTHON_VERSION=default

# Setup work directory for backward-compatibility
RUN mkdir /home/$NB_USER/work  \
 && fix-permissions /home/$NB_USER

ENV MINICONDA_VERSION=4.8.2 \
    MINICONDA_MD5=87e77f097f6ebb5127c77662dfc3165e \
    CONDA_VERSION=4.8.2

# Install conda as jovyan and check the md5 sum provided on the download site
RUN cd /tmp \
 && wget --quiet https://repo.continuum.io/miniconda/Miniconda3-py37_${MINICONDA_VERSION}-Linux-x86_64.sh \
 && echo "${MINICONDA_MD5} *Miniconda3-py37_${MINICONDA_VERSION}-Linux-x86_64.sh" | md5sum -c - \
 && /bin/bash Miniconda3-py37_${MINICONDA_VERSION}-Linux-x86_64.sh -f -b -p $CONDA_DIR \
 && rm Miniconda3-py37_${MINICONDA_VERSION}-Linux-x86_64.sh \
 && echo "conda ${CONDA_VERSION}" >> $CONDA_DIR/conda-meta/pinned \
 && conda config --system --prepend channels conda-forge \
 && conda config --system --set auto_update_conda false \
 && conda config --system --set show_channel_urls true \
 && conda config --system --set channel_priority strict \
 && if [ ! $PYTHON_VERSION = 'default' ]; then conda install --yes python=$PYTHON_VERSION; fi \
 && conda list python | grep '^python ' | tr -s ' ' | cut -d '.' -f 1,2 | sed 's/$/.*/' >> $CONDA_DIR/conda-meta/pinned \
 && conda install --quiet --yes conda \
 && conda install --quiet --yes pip \
 && conda update --all --quiet --yes \
 && conda clean --all -f -y \
 && rm -rf /home/$NB_USER/.cache/yarn \
 && fix-permissions $CONDA_DIR \
 && fix-permissions /home/$NB_USER \
 && gcloud config set pass_credentials_to_gsutil false \
 && mkdir -p /tmp/data \
 && fix-permissions /tmp/data

# Install Tini
RUN conda install --quiet --yes 'tini=0.18.0' \
 && conda list tini | grep tini | tr -s ' ' | cut -d ' ' -f 1,2 >> $CONDA_DIR/conda-meta/pinned \
 && conda clean --all -f -y \
 && fix-permissions $CONDA_DIR \
 && fix-permissions /home/$NB_USER

# Install Jupyter Notebook, Lab, and Hub
# Generate a notebook server config
# Cleanup temporary files
# Correct permissions
# Do all this in a single RUN command to avoid duplicating all of the
# files across image layers when the permissions change
RUN conda install --quiet --yes \
    'notebook=6.0.3' \
    'jupyterhub=1.1.0' \
    'ipywidgets=7.5.*' \
    'widgetsnbextension=3.5.*' \
    'jupyterlab_code_formatter=1.3.6' \
    'black=20.8b1' \
    'isort=5.5.2' \
    'nbresuse=0.3.6' \
    'opencv=4.1.2' \
    'nbformat=5.0.8' \
    'numpy=1.19.5' \
 && conda clean --all -f -y \
    # Install PlatIAgro's Jupyterlab customized version
 && pip install --no-cache-dir \
    git+https://github.com/platiagro/jupyterlab.git@v0.2.0-jupyterlab-v2.1.2 \
    # Activate ipywidgets extension in the environment that runs the notebook server
 && jupyter nbextension enable --py widgetsnbextension --sys-prefix \
    # Also activate ipywidgets extension for JupyterLab
    # Check this URL for most recent compatibilities
    # https://github.com/jupyter-widgets/ipywidgets/tree/master/packages/jupyterlab-manager
 && jupyter labextension install @jupyter-widgets/jupyterlab-manager@^2.0.0 --no-build \
    # Activate jupyterlab_code_formatter server extension
 && jupyter serverextension enable --py jupyterlab_code_formatter --sys-prefix \
    # Install JupyterLab extensions:
    # (defer rebuilding the application by including the flag --no-build)
    # - Code Formatter
    # - Plotly
    # - Topbar
    # - System Monitor
    # - Table of Contents
 && jupyter labextension install --no-build  \
      @ryantam626/jupyterlab_code_formatter@1.3.6 \
      jupyterlab-plotly@4.14.1 \
      jupyterlab-topbar-extension@0.5.0 \
      jupyterlab-system-monitor@0.6.0 \
      @jupyterlab/toc@4.0.0 \
    # Install PlatIAgro extension for JupyterLab
 && pip --no-cache-dir install \
    git+https://github.com/platiagro/jupyterlab-extension.git@master \
 && jupyter lab build -y \
 && jupyter lab clean -y \
 && npm cache clean --force \
 && jupyter notebook --generate-config \
 && rm -rf $CONDA_DIR/share/jupyter/lab/staging \
 && rm -rf /home/$NB_USER/.cache/yarn \
 && fix-permissions $CONDA_DIR \
 && fix-permissions /home/$NB_USER

# Install:
# - Cython - compiler for writing C extensions for the Python language
# - scikit-learn - machine learning library
# - Pandas - data analysis library
# - JupyterLab - web-based user interface for Project Jupyter
# - Seldon Core - platform to deploy machine learning models
# - Papermill - tool for parameterizing and executing Jupyter Notebooks
# - Category Encoders - scikit-learn-style transformers
# - imbalanced-learn - re-sampling techniques used in datasets showing between-class imbalance
# - auto-sklearn - toolkit for automated machine learning
# - Featuretools -  library for automated feature engineering
# - Tensorflow - machine learning library
# - NetworkX - creates and manipulates graphs and networks
# - Platiagro SDK - helper functions to build components
# - PyTorch - machine learning library
# - PyTorch Lightning - lightweight PyTorch wrapper for ML researchers
# - Transfomers - state-of-the-art natural language processing
# - SacreBLEU - standard BLEU implementation
# - xlrd - extract data from Microsoft Excel spreadsheet files
# - imutils - functions to make basic image processing with OpenCV
# - rouge_score - python implementation of ROUGE (Automatic Evaluation of Summaries)
# - spacy - library for advanced Natural Language Processing (NLP)
# - nltk - natural language toolkit
# - pystan - Stan, a package for Bayesian inference
# - convertdate - converts between Gregorian dates and other calendar systems
# - LunarCalendar - a lunar calendar converter
# - holidays - generate and work with holidays
# - plotly - interactive data visualization library
# - torchtext - text utilities and datasets for PyTorch
# - alibi - algorithms for monitoring and explaining machine learning models
# - alibi-detect - algorithms for outlier detection, concept drift and metrics
# - matplotlib - library for creating static, animated, and interactive visualizations
# - Unidecode - ASCII transliterations of Unicode tex
# - ftfy - Fixes some problems with Unicode text after the fact
# - scikit-video - Video processing routines
# - nlp==0.4.0 - package with datasets and metric pre implemented for nlp solutions
# - tqdm==4.41.1 - progress bar
# - git+https://github.com/albumentations-team/albumentations - package to make data augmentation in computer vision
# - gensim==4.0.0b0 - nlp package with many funcionalities pre-implemented
# - numba==0.48.0 - package to paralelize cpus
# - jsonlines==1.2.0 - package to save and read with lists of dicionaries
# - opencv-contrib-python==4.1.2.30 - package for work with images
# - opencv-python==4.1.2.30 - package for work with images
# - jiwer==2.1.0 package with some metrics used in OCR
# - pytesseract==0.3.6 package with OCR algorithms
# - gdown==3.12.2 download google drive files
# - emcee==3.0.2 lib pre-requisite of yolov4
# - scikit-optimize==0.8.1 lib pre-requisite of yolov4
# - pyDOE==0.3.8 lib pre-requisite of yolov4
# - yolov4==2.0.0 lib of yolov4
# - openpyxl==3.0.5 read and write xlsx files within pandas
# - shap==0.37.0 exaplinable AI lib
# - facenet-pytorch==2.5.1 Required for MTCNN
# - sentencepiece - encoding, decoding and training of Sentencepiece
# - dvc[all]==2.3.0 - manage your code and data together
# - PyPDF4 - Convert PDF to text
# - rank-bm25 - Use Rank BM25 algorithim to rank texts

# Installs numpy and packages that don't depend on numpy
RUN pip install --no-cache-dir \
    convertdate==2.2.1 \
    Cython \
    ftfy==5.8 \
    gdown==3.12.2 \
    holidays==0.10.3 \
    imutils==0.5.3 \
    jsonlines==1.2.0 \
    joblib \
    liac-arff \
    lockfile \
    LunarCalendar==0.0.9 \
    networkx==2.4 \
    nltk==3.2.5 \
    numba==0.48.0 \
    "numpy~=1.19.5" \
    "plotly>=4.14.1,<5" \
    openpyxl==3.0.5 \
    pytesseract==0.3.6 \
    sacrebleu==1.4.9 \
    sentencepiece==0.1.95 \
    setuptools \
    papermill==2.2.2 \
    pyserini==0.8.1.0 \
    pystan==2.19.1.1 \
    psutil \
    pyyaml \
    tqdm==4.41.1 \
    Unidecode==1.1.1 \
    xlrd==1.2.0 \
 # Then, installs pandas
 && pip install --no-cache-dir --no-build-isolation \
   "pandas>=1.0" \
 # Then, installs packages that depend on numpy
 && pip install --no-cache-dir --no-build-isolation \
    -f https://download.pytorch.org/whl/torch_stable.html \
    git+https://github.com/albumentations-team/albumentations \
    alibi==0.5.5 \
    alibi-detect==0.4.4 \
    auto-sklearn==0.12.1 \
    category-encoders==2.2.2 \
    "ConfigSpace>=0.4.14,<0.5" \
    dask[complete]==2021.2.0 \
    dvc[all]==2.3.0 \
    "distributed>=2.2.0" \
    emcee==3.0.2 \
    facenet-pytorch==2.5.1 \
    featuretools==0.23.1 \
    gensim==4.0.0b0 \
    imbalanced-learn==0.7.0 \
    jiwer==2.2.0 \
    matplotlib==3.3.0 \
    nlp==0.4.0 \
    opencv-contrib-python==4.1.2.30 \
    opencv-python==4.1.2.30 \
    git+https://github.com/platiagro/sdk.git@master#egg=platiagro[plotting] \
    pyDOE==0.3.8 \
    "pynisher>=0.6.3" \
    "pyrfr>=0.7,<0.9" \
    pytorch-lightning==1.2.4 \
    rouge_score==0.0.4 \
    "scikit-learn>=0.24.0,<0.25.0" \
    scikit-optimize==0.8.1 \
    scikit-video==1.1.11 \
    "scipy>=1.4.1,<1.5" \
    seaborn==0.11.1 \
    seldon-core==1.4.0 \
    shap==0.37.0 \
    "smac>=0.13.1,<0.14" \
    spacy==3.0.1 \
    tensorflow==2.4.1 \
    torch==1.8.1+cpu \
    torchvision==0.9.1+cpu \
    torchaudio==0.8.1 \
    torchtext==0.9.1 \
    transformers==4.3.2 \
    yolov4==2.1.0 \
    PyPDF4==1.27.0 \
    rank-bm25==0.2.1 \
 && pip uninstall -y typing \
 && fix-permissions $CONDA_DIR \
 && fix-permissions /home/$NB_USER

USER root

# Copy a script that we will use to make output notebook cells read only
COPY make-cells-read-only.sh /usr/local/bin/
RUN chmod a+rx /usr/local/bin/make-cells-read-only.sh

# Copy a script that we will use to interact with jupyter
COPY upload-to-jupyter.sh /usr/local/bin/
RUN chmod a+rx /usr/local/bin/upload-to-jupyter.sh

# Copy a script that we will use to save datasets using the SDK
COPY save-dataset.sh /usr/local/bin/
RUN chmod a+rx /usr/local/bin/save-dataset.sh

# Copy a script that we will use to save figure using the SDK
COPY save-figure.sh /usr/local/bin/
RUN chmod a+rx /usr/local/bin/save-figure.sh

# Copy a custom jupyter config file
# Currently, only custom option is FileContentsManager.delete_to_trash = False
# This is necessary since notebook server has many volumes mounted and
# using trash folder may cause the error
# Invalid cross-device link: '/home/jovyan/tasks/...' -> '/home/jovyan/.local/share/Trash/...''
COPY jupyter_notebook_config.py "${HOME}/.jupyter/"

# Unfortunately, Kubeflow pipelines mount volumes as root root (user group).
# If we want to use this image in a ContainerOp where there are mount volumes,
# the user must remain as root.
# Kubeflow must add support to PodsecurityContext before we can change this.
# https://github.com/kubeflow/pipelines/blob/master/sdk/python/kfp/components/structures/kubernetes/v1.py
# USER $NB_UID

EXPOSE 8888

ENTRYPOINT ["tini", "--"]
CMD ["sh", "-c", "jupyter lab --allow-root --notebook-dir=/home/${NB_USER} --ip=0.0.0.0 --no-browser --port=8888 --NotebookApp.token='' --NotebookApp.password='' --NotebookApp.allow_origin='*' --NotebookApp.base_url=${NB_PREFIX}"]
